// This is your StartUprisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id    String @id @default(uuid())
  email String @unique

  status String?

  avatar                 String?
  full_name              String
  fone                   String
  password               String
  profile                String
  birth                  String?





  he_knew String?
  business String?
  help String?

  message String? @db.Text

  how_long_do_you_invest String?
  main_investments String?
  sources_of_income String?
  annual_income_ornet_worth String?
  goal String?
  what_are_your_growth_expectations String? @db.Text
  link_or_social_networks String?

  token_recover_password String?  @unique
  date_update            DateTime @updatedAt
  date_create            DateTime @default(now())

  companies Companies[]
  releases  Releases[]
  group     Group[]
  Valuation Valuation[]

  authorId String?

  @@map("usuarios")
}

model Companies {
  id     String @id @default(uuid())
  avatar String
  name   String

  description String?
  sector      String?
  address     String?
  city        String?
  state       String?
  zip         String?
  email       String?
  phone       String?
  website     String?

  equity Float?

  status String?

  realeases    Releases[]
  partner      Partner[]
  collaborator Collaborator[]
  group        Group[]
  valuation    Valuation[]

  owner   Users  @relation(fields: [ownerId], references: [id])
  ownerId String

  authorId String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())

  @@map("empresas")
}

model Group {
  id String @id @default(uuid())

  status Status

  company   Companies @relation(fields: [companyId], references: [id])
  companyId String

  member   Users  @relation(fields: [memberId], references: [id])
  memberId String

  viewedNotification Boolean

  authorId String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())

  @@map("grupo")
}

enum Status {
  PENDENTE
  APROVADO
  NEGADO
}

model Releases {
  id String @id @default(uuid())

  month          Int
  year           Int
  valuation      Float?
  lucroLiquido   Float
  receitaLiquida Float
  despesaBruta   Float

  docs  String?

  company   Companies @relation(fields: [companyId], references: [id])
  companyId String

  author   Users  @relation(fields: [authorId], references: [id])
  authorId String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())

  @@map("lancamentos")
}

model Department {
  id String @id @default(uuid())
}

model Partner {
  id String @id @default(uuid())

  people   People @relation(fields: [peopleId], references: [id])
  peopleId String

  company   Companies @relation(fields: [companyId], references: [id])
  companyId String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())

  @@map("socios")
}

model Collaborator {
  id String @id @default(uuid())

  people   People @relation(fields: [peopleId], references: [id])
  peopleId String

  company   Companies @relation(fields: [companyId], references: [id])
  companyId String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())

  @@map("colaboradores")
}

model People {
  id          String @id @default(uuid())
  avatar      String
  name        String
  office      String
  description String
  email       String @unique
  contact     String

  partner      Partner[]
  collaborator Collaborator[]

  date_update DateTime @updatedAt
  date_create DateTime @default(now())

  @@map("pessoa")
}

model Expenses {
  id String @id @default(uuid())
}

model StartUp {
  id               String @id @default(uuid())
  companyName      String
  describe         String @db.Text
  sizeCompany      String
  presentationLink String
  usefulLink       String
  city             String
  phone            String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())
}

model Valuation {
  id String @id @default(uuid())

  value Float
  docs  String

  company   Companies @relation(fields: [companyId], references: [id])
  companyId String

  author   Users  @relation(fields: [authorId], references: [id])
  authorId String

  date_update DateTime @updatedAt
  date_create DateTime @default(now())
}

